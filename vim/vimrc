call plug#begin('~/.vim/plugged')
    Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
    Plug 'junegunn/fzf.vim'
    Plug 'phpactor/phpactor', {'for': 'php', 'tag': '*', 'do': 'composer install --no-dev -o'}
    Plug 'ncm2/ncm2'
    Plug 'roxma/nvim-yarp'
    Plug 'phpactor/ncm2-phpactor'
    Plug 'tpope/vim-fugitive'
    Plug 'preservim/nerdtree'
    Plug 'SirVer/ultisnips'
    Plug 'StanAngeloff/php.vim'
    Plug 'scrooloose/nerdcommenter'
    Plug 'tpope/vim-eunuch'
    Plug 'christoomey/vim-tmux-navigator'
    Plug 'scrooloose/syntastic'
    Plug 'pangloss/vim-javascript'
    Plug 'adoy/vim-php-refactoring-toolbox'
    Plug 'Raimondi/delimitMate'
    Plug 'w0ng/vim-hybrid'
    Plug 'ervandew/supertab'
    Plug 'leafgarland/typescript-vim'
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'
call plug#end()

syntax on
set background=dark
colorscheme hybrid

" indent files based on filetype
filetype plugin indent on

" make backspace behave normally
set backspace=2
" display line numbers
set number
" number of columns in a tab
set tabstop=4
" number of columns to shift tabs using << and >> operators
set shiftwidth=4
" convert tabs to spaces
set expandtab

" Ignore letter case when searching
set ignorecase
" If the search pattern is lowercase, ignore case
set smartcase

set incsearch
set nohlsearch

set nowrap

set splitbelow
set splitright

" set the working dir to that of the currently open buffer
set autochdir

" preserve undo history
set hidden

" Load file changes without prompting
set autoread

" wrap lines
set wrap
set linebreak
set showbreak=+

" store swap and backup files elsewhere (not with the project files)
set backupdir=~/.vim/backup//
set directory=~/.vim/swap//

" Allow resizing vim splits with a mouse in tmux
set mouse+=a
if &term =~ '^screen'
    set ttymouse=xterm2
endif

" set up delimitMate to autoindent after braces
let delimitMate_expand_cr=1

" Various shortcuts
let mapleader = ","
nnoremap <Leader>w :w<CR>
nnoremap <Leader>q :q<CR>
nnoremap <Leader>a :wq<CR>
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
nnoremap <Leader>[ :bprevious<CR>
nnoremap <Leader>] :bnext<CR>
nnoremap <Leader>l :bdelete<CR>
nnoremap <Leader>s :SyntasticToggleMode<CR>
nnoremap <Leader>f :Files<CR>
nnoremap <Leader>p :Ag<CR>
nnoremap <Leader>gc :Commits<CR>
nnoremap <Leader>t :NERDTree<CR>
nnoremap <Leader>b :bNext<CR>

" override php syntax highlighting
function! PhpSyntaxOverride()
    hi! def link phpDocTags  phpDefine
    hi! def link phpDocParam phpType
endfunction

augroup phpSyntaxOverride
    autocmd!
    autocmd FileType php call PhpSyntaxOverride()
augroup END

let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-n>"
let g:UltiSnipsJumpBackwardTrigger="<c-b>"

" Syntastic configuration
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0

" set syntax highlighting for specific filetypes
au BufNewFile,BufRead *.less set filetype=less
au BufRead,BufNewFile *.asm set filetype=nasm

autocmd BufEnter * call ncm2#enable_for_buffer()
set completeopt=noinsert,menuone,noselect

let g:airline#extensions#tabline#enabled = 1
